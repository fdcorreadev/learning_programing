* git init

Estas en la carpeta en la estan los archivos de tu proyecto.
abres la terminal y ejecutas git init para indicar que esta es la carpeta central de mis archivos.
cuando ejecutemos el comando, ademas, creamos:
 a. Staging, es el area en la memoria RAM que es donde al principio iremos agregando los cambios
 b. repository (repositorio/master) es el directorio que conocemos como /.git/ que es el lugar donde al final del proyecto quedaran
 todos los cambios

* git config-global user.name "mi user o nombre"
configuramos el git a nuestro nombre

* git config-global user.email "tu@correo.com"
configuramos git con nuestro correo.

* git config --list
-Nos muestra la configuración por defecto de nuestro git.

* git add archivo.extencion
Agregamos el archivo al staging, en este punto el archivo espera a que lo agreguemos al repositorio.
NOTA: antes de usar este comando, el archivo lo llamamos como un archivo "untracked", luego de usar el comando el archivo lo podemos llamr un archivo tracked, cuando esta ya en el staging
    *git add .
    Agregamos TODOS los archivos dentro de nuestra carpeta al staging.

* git rm -cached archivo.extension
Eliminamos el archivo del staging area y lo volvemos Untracked.

*git commit -m "mensaje"
Luego de escribir un mensaje descriptivo, mandamos el archivo al repósitorio/master.
NOTA: cada commit es una nueva version con cambios de tu archivo.

*git status
Nos muestra cual es el status de nuestro proyecto

* git log
muestra el historial de commits hechos desde el mas reciente hsta el mas viejo.

* git log --stat
Nos muestra el hislos cambios especificos de cada commit desde el mas reciente hasta el mas viejo

*git show archivo.extension
Muestra los cambios hechos al archivo en el ultimo commit

*git diff
Nos muestra las diferencias entre los cambios que estan en el staging y los que aun no se han añadido

* git diff #commit-n *commit-n
Nos muestra las diferencias entre las 2 versiones de los commits.

*git reset #commit --soft
-volvemos nuestro repositorio a la version del commit que se le indique, pero sin borrar los commits usados anteriormente

*git reset #commit --hard
volvemos a nuestro archivo a la version del commit indicada, BORRANDO TODOS los commits usados anteriores a la version del commit indicada

*git checkout #commit archivo.ext
volvemos a nuestro archivo a la version del commit indicada, sin cambiar nada en el staging
  *git checkout master  archivo.ext
  volvemos nuestro archivo a la version que teniamos antes de hacer el primer checkout, sin cambiar nada en el staging

#-----------------------------------------------------------------NOTA RESET-----------------------------------------------------------#

*git reset --soft: 
Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging para aplicar las últimas actualizaciones a un nuevo commit.

*git reset --hard: 
Deshace todo, absolutamente todo. Toda la información de los commits y del área de staging se elimina del historial.

*git reset --mixed: 
Borra todo, exactamente todo. Toda la información de los commits y del área de staging se elimina del historial.

*git reset HEAD: 
El comando git reset saca archivos del área de staging sin borrarlos ni realizar otras acciones. Esto impide que los últimos cambios en estos archivos se envíen al último commit. Podemos incluirlos de nuevo en staging con git add si cambiamos de opinión.

![imagen][def]
[def]: https://static.platzi.com/media/user_upload/arboles-git-3092a895-4d68-4d40-b397-033e2d5f0767.jpg

¿Cuál es la diferencia entre git rm y git reset Head?
La diferencia principal entre git rm y git reset HEAD radica en que git rm elimina archivos del repositorio y de la historia del proyecto, mientras que git reset saca los cambios del área de preparación y los mueve del espacio de trabajo, sin afectar la historia del repositorio.

![git][def2]
[def2]: https://static.platzi.com/media/user_upload/git-reset%20%281%29-77a1294a-fb8b-43d0-aace-a517c1a05c2e.jpg

Es importante tener en cuenta el efecto que cada comando tiene en el proyecto y usarlos según tus necesidades y objetivos específicos.


*git pull origin master --allow-unrelated-histories
Comando con el que realizamos el pull cuando se quiere traer un repositorio de la nube y combinarlo con el local despues de git remote

*git log --all
muestra toda los commits que hemos hecho como un historial

*git log --all -- graph
sirve para mostrar el comportamiento de las ramas en el proyecto

*git log --all --graph --decorate --oneline
sirve para mostrar el comportamiento de las ramas en el proyecto de una manera comprimida

*git tag -a v0.1 -m "texto" hashdelcommit
para crear la versiones de codigo como V1,v2,v3 etc.

*git show-ref -tags
sirve para ver a que hash pertenece el tags

*git push origin --tags
para empujar el tags


*git tag
ver tags creados

*git tag -d nombre_tag
eliminar tags en local

*git push origin :refs/tags/nombre_tag
Elimina el tag en el repositorio online


*git show-branch --all
muestra todas las ramas

*gitk
ver visual ramas


*git remote add upstream url
no crea otra fuente nueva donde podemos traer datos a nuestra rama main

*git rebase branch 
sirve para pegar la rama tal cual no deja rastro que existio la otra rama

* git stash
guarda en un lugar temporal

* git stash list 
ver los stash guardados

* git stash pop 
volver a bajar los cambios a el editor de codigo

* git stash branch nombre_rama
crea una rama con el codigo que fue guardado en el stash

* git stash drop
borrar cambios en el stash

* git clean --dry-run
borrar archivos copia en seco

* git clean -f
borrar no deseados, no sirve para carpeta

* git cherry-pick
sirve para traer solo un comit determinado

* git reflog
recuperar todo

* git reset --SOFT hashCommit
es para recuperar, lo que tienes en el statement lo mantiene, lo que todavia esta pendiente de un commit

* git reset --HARD hashCommit
te resetea todo

* git reset --amend
pega los cambios al commit anterior cuando se te olvida algo y no haz enviado aun el push 

* git grep paralbra clave 
para ver cuanto se repite una palabra o una funcion etc.

* git grep -n paralbra clave
esto sirve para ver en que linea se encuenta

* git grep -c paralbra clave
cuenta cunto se repite la palabra clave

* git log -S paralbra clave
para buscar la palabra clave dentro de los cimmit

* git shortlog -sn  
muestra cuantos commit han hecho cada miembros del equipo.

* git shortlog -sn --all 
 muestra cuantos commit han hecho cada miembros del equipo hasta los que han sido eliminado

* git shortlog -sn --all --no-merge 
 muestra cuantos commit han hecho cada miembros quitando los eliminados sin los merges

* git blame ARCHIVO 
 muestra quien hizo cada cosa linea por linea

* git blame archivo L35-53
que me muetre quien hizo los cambios en esas rama

* git COMANDO --help 
 muestra como funciona el comando.

* git blame ARCHIVO -Llinea_inicial,linea_final
 muestra quien hizo cada cosa linea por linea indicándole desde que linea ver ejemplo -L35,50

* **git branch -r **
 se muestran todas las ramas remotas

* git branch -a 
 se muestran todas las ramas tanto locales como remotas
